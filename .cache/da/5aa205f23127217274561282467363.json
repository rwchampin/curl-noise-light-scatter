{"id":"LB8m","dependencies":[{"name":"/Users/ryanchampin/Downloads/f4a81dc8-26f1-47ac-b2a5-d995234e1cb4/package.json","includedInParent":true,"mtime":1707998553734}],"generated":{"js":"module.exports=\"#define GLSLIFY 1\\nuniform float uTime;\\nuniform vec3 uLight;\\n\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 vWorldPosition;\\n\\nconst float PI = 3.141592653589793238;\\n\\n/**\\n * @see https://ijdykeman.github.io/graphics/simple_fog_shader\\n * @see https://gist.github.com/akella/fbc8ec75b2cb1586388f19e32ceaf1f2\\n */\\nfloat getScatter(vec3 cameraPos, vec3 dir, vec3 lightPos, float d) {\\n  // light to ray origin\\n  vec3 q = cameraPos - lightPos;\\n\\n  // coefficients\\n  float b = dot(dir, q);\\n  float c = dot(q, q);\\n\\n  // evaluate integral\\n  float t = c - b * b;\\n  float s = 1.0 / sqrt(max(0.0001, t));\\n  float l = s * (atan((d + b) * s) - atan(b * s));\\n\\n  return pow(max(0.0, l / 250.0), 0.4);\\n}\\n\\nvoid main() {\\n  vec2 uv = vUv;\\n\\n  vec3 cameraToWorld = vWorldPosition - cameraPosition;\\n  vec3 cameraToWorldDir = normalize(cameraToWorld);\\n  float cameraToWorldDist = length(cameraToWorld);\\n\\n  vec3 lightToWorld = normalize(uLight - vWorldPosition);\\n  float diffuse = max(0.0, dot(vNormal, lightToWorld));\\n  float dist = length(uLight - vPosition);\\n\\n  float scatter = getScatter(cameraPosition, cameraToWorldDir, uLight, cameraToWorldDist);\\n\\n  float final = diffuse + scatter;\\n  vec3 ambient = vec3(0.05, 0.0, 0.15);\\n  vec3 color = vec3(final, 0.0, 0.0) + ambient;\\n  gl_FragColor = vec4(color, 1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"source":"js/shaders/fragment.glsl","name":"module","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"js/shaders/fragment.glsl","name":"exports","original":{"line":1,"column":7},"generated":{"line":1,"column":7}},{"source":"js/shaders/fragment.glsl","original":{"line":1,"column":15},"generated":{"line":1,"column":15}}],"sources":{"js/shaders/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float uTime;\\nuniform vec3 uLight;\\n\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 vWorldPosition;\\n\\nconst float PI = 3.141592653589793238;\\n\\n/**\\n * @see https://ijdykeman.github.io/graphics/simple_fog_shader\\n * @see https://gist.github.com/akella/fbc8ec75b2cb1586388f19e32ceaf1f2\\n */\\nfloat getScatter(vec3 cameraPos, vec3 dir, vec3 lightPos, float d) {\\n  // light to ray origin\\n  vec3 q = cameraPos - lightPos;\\n\\n  // coefficients\\n  float b = dot(dir, q);\\n  float c = dot(q, q);\\n\\n  // evaluate integral\\n  float t = c - b * b;\\n  float s = 1.0 / sqrt(max(0.0001, t));\\n  float l = s * (atan((d + b) * s) - atan(b * s));\\n\\n  return pow(max(0.0, l / 250.0), 0.4);\\n}\\n\\nvoid main() {\\n  vec2 uv = vUv;\\n\\n  vec3 cameraToWorld = vWorldPosition - cameraPosition;\\n  vec3 cameraToWorldDir = normalize(cameraToWorld);\\n  float cameraToWorldDist = length(cameraToWorld);\\n\\n  vec3 lightToWorld = normalize(uLight - vWorldPosition);\\n  float diffuse = max(0.0, dot(vNormal, lightToWorld));\\n  float dist = length(uLight - vPosition);\\n\\n  float scatter = getScatter(cameraPosition, cameraToWorldDir, uLight, cameraToWorldDist);\\n\\n  float final = diffuse + scatter;\\n  vec3 ambient = vec3(0.05, 0.0, 0.15);\\n  vec3 color = vec3(final, 0.0, 0.0) + ambient;\\n  gl_FragColor = vec4(color, 1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"35855276d98e4793db4dd7643bfebc47","cacheData":{"env":{}}}